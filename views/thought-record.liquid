{% layout 'layout.liquid' %}

{% block title %}Thought Record | CBT Workbook{% endblock %}

{% block main %}
<main class="min-h-screen text-white p-4" x-data="thoughtRecordApp">
  <div class="max-w-7xl md:mx-auto bg-gray-900 p-2 md:p-6 rounded-lg shadow-lg">
    <nav class="bg-gray-800 p-4 flex flex-col sm:flex-row justify-between items-center rounded-lg mb-6 gap-4 sm:gap-0">
      <h1 class="text-xl sm:text-3xl font-bold text-purple-400">Thought Record</h1>
      <div>
        <a href="/dashboard" class="bg-gray-700 px-4 py-2 rounded-lg hover:bg-gray-600 transition">
          Back to Dashboard
        </a>
      </div>
    </nav>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Calendar Section -->
      <div class="bg-gray-800 rounded-lg p-6 shadow-lg" x-data="calendarData">
        <div class="flex justify-between items-center mb-4">
          <button
            class="text-gray-400 hover:text-white p-2 transition"
            @click="prevMonth"
            aria-label="Previous month"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
          </button>
          <h2 class="text-lg font-semibold text-white" x-text="currentMonthName + ' ' + currentYear"></h2>
          <button
            class="text-gray-400 hover:text-white p-2 transition"
            @click="nextMonth"
            aria-label="Next month"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>

        <div class="grid grid-cols-7 gap-1 text-center mb-2">
          <template x-for="(day, index) in weekdays" :key="index">
            <div class="text-xs text-gray-400 font-semibold py-1" x-text="day"></div>
          </template>
        </div>

        <div class="grid grid-cols-7 gap-1 text-center">
          <!-- Empty cells for days before the first day of the month -->
          <template x-for="blank in firstDayOfMonth" :key="'blank-' + blank">
            <div class="aspect-square bg-gray-700/30 rounded-md"></div>
          </template>

          <!-- Actual days of the month -->
          <template x-for="day in daysInMonth" :key="day">
            <div
              class="aspect-square flex flex-col items-center justify-center rounded-md cursor-pointer transition-all duration-200 group relative"
              :class="getDayClasses(day)"
              @click="selectDate(day)"
            >
              <span
                class="text-sm"
                :class="{'font-bold': isToday(day)}"
                x-text="day"
              >
              </span>

              <!-- Indicator for days with thought records -->
              <div
                x-show="hasThoughtData(day)"
                class="absolute bottom-1 left-1/2 transform -translate-x-1/2 flex"
              >
                <div class="w-2 h-2 rounded-full bg-purple-500"></div>
              </div>
            </div>
          </template>

          <!-- Empty cells for days after the last day of the month -->
          <template x-for="blank in (42 - daysInMonth - firstDayOfMonth) % 7" :key="'end-blank-' + blank">
            <div class="aspect-square bg-gray-700/30 rounded-md"></div>
          </template>
        </div>

        <div id="calendar-loader" class="htmx-indicator my-3 flex justify-center">
          <div class="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-purple-500"></div>
        </div>

        <div class="mt-4 text-center">
          <p class="text-xs text-gray-400">Select a date to view or add thought records</p>
        </div>
      </div>

      <!-- Thought Records Section -->
      <div class="bg-gray-800 rounded-lg p-6 shadow-lg lg:col-span-2">
        <h2 class="text-lg font-semibold text-purple-400 mb-4 flex justify-between items-center">
          <span>{{ selectedDate | date: '%A, %B %e, %Y' }}</span>
          <button 
            id="add-thought-btn"
            class="bg-purple-500 text-white px-3 py-1 rounded-lg hover:bg-purple-600 transition text-sm"
            @click="toggleNewThoughtForm"
          >
            + New Record
          </button>
        </h2>

        <!-- Form for adding a new thought record - initially hidden -->
        <div id="new-thought-form" x-ref="newThoughtForm" class="hidden mb-6 bg-gray-700 p-4 rounded-lg">
          <h3 class="text-lg font-semibold text-purple-400 mb-3">New Thought Record</h3>
          <form
            id="thought-form"
            action="{{ formAction }}"
            method="POST"
            class="space-y-4"
          >
            <!-- Situation -->
            <div class="space-y-1">
              <label for="situation" class="block text-sm font-medium text-gray-300">
                Situation <span class="text-red-400">*</span>
              </label>
              <textarea
                id="situation"
                name="situation"
                rows="2"
                required
                class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-white resize-none"
                placeholder="What happened? What were you doing? Where were you?"
              ></textarea>
            </div>

            <!-- Emotions and Intensity -->
            <div class="space-y-1" x-data="{ emotions: [''], intensities: [5] }">
              <label class="block text-sm font-medium text-gray-300">
                Emotions & Intensity <span class="text-red-400">*</span>
              </label>
              <div class="space-y-2">
                <template x-for="(emotion, index) in emotions" :key="index">
                  <div class="flex space-x-2">
                    <div class="flex-grow">
                      <input
                        type="text"
                        x-model="emotions[index]"
                        :name="`emotions`"
                        required
                        class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-white"
                        placeholder="Emotion (e.g., Anxiety, Sadness)"
                      >
                    </div>
                    <div class="w-20">
                      <input
                        type="number"
                        x-model="intensities[index]"
                        :name="`emotion_intensity`"
                        min="1"
                        max="10"
                        required
                        class="w-full px-2 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-white text-center"
                        placeholder="1-10"
                      >
                    </div>
                    <button 
                      type="button" 
                      @click="emotions.splice(index, 1); intensities.splice(index, 1)"
                      class="px-2 py-2 bg-red-500/50 text-white rounded-lg hover:bg-red-500/70"
                      x-show="emotions.length > 1"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                      </svg>
                    </button>
                  </div>
                </template>

                <button 
                  type="button" 
                  @click="emotions.push(''); intensities.push(5)"
                  class="px-3 py-1 bg-gray-600 text-white rounded-lg hover:bg-gray-500 text-sm"
                >
                  + Add Another Emotion
                </button>
              </div>
            </div>
            
            <!-- Automatic Thoughts -->
            <div class="space-y-1">
              <label for="automatic_thoughts" class="block text-sm font-medium text-gray-300">
                Automatic Thoughts <span class="text-red-400">*</span>
              </label>
              <textarea
                id="automatic_thoughts"
                name="automatic_thoughts"
                rows="3"
                required
                class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-white resize-none"
                placeholder="What thoughts automatically went through your mind?"
              ></textarea>
            </div>

            <!-- Belief in original thought -->
            <div class="space-y-1" x-data="{ beliefOriginal: 80 }">
              <div class="flex justify-between items-center">
                <label for="belief_original" class="block text-sm font-medium text-gray-300">
                  Belief in Original Thought (%)
                </label>
                <span class="text-purple-400 text-lg font-semibold" x-text="beliefOriginal + '%'"></span>
              </div>
              <input
                type="range"
                class="w-full h-2 bg-gray-700 rounded-lg  cursor-pointer accent-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500"
                min="0"
                max="100"
                step="5"
                x-model="beliefOriginal"
              >
            </div>

            <!-- Cognitive Distortions -->
            <div class="space-y-1">
              <label class="block text-sm font-medium text-gray-300">Cognitive Distortions</label>
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
                {% for distortion in cognitiveDistortions %}
                  <div class="flex items-start">
                    <input
                      type="checkbox"
                      id="distortion_{{ distortion.name | slugify }}"
                      name="cognitive_distortions[]"
                      value="{{ distortion.name }}"
                      class="mt-1 mr-2 rounded bg-gray-700 border-gray-600 text-purple-500 focus:ring-purple-500"
                    >
                    <div>
                      <label for="distortion_{{ distortion.name | slugify }}" class="text-gray-300 select-none">{{ distortion.name }}</label>
                      <p class="text-xs text-gray-400 mt-0.5">{{ distortion.description }}</p>
                    </div>
                  </div>
                {% endfor %}
              </div>
            </div>

            <!-- Rational Response -->
            <div class="space-y-1">
              <label for="rational_response" class="block text-sm font-medium text-gray-300">Rational Response</label>
              <textarea
                id="rational_response"
                name="rational_response"
                rows="3"
                class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-white resize-none"
                placeholder="What's a more balanced way of thinking about this situation?"
              ></textarea>
            </div>

            <!-- Outcome emotions -->
            <div class="space-y-1" x-data="{ outcomeEmotions: [''], outcomeIntensities: [3] }">
              <label class="block text-sm font-medium text-gray-300">Outcome Emotions & Intensity (After Reframing)</label>
              <div class="space-y-2">
                <template x-for="(emotion, index) in outcomeEmotions" :key="'outcome-'+index">
                  <div class="flex space-x-2">
                    <div class="flex-grow">
                      <input
                        type="text"
                        x-model="outcomeEmotions[index]"
                        :name="`outcome_emotions`"
                        class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-white"
                        placeholder="Emotion after reframing"
                      >
                    </div>
                    <div class="w-20">
                      <input
                        type="number"
                        x-model="outcomeIntensities[index]"
                        :name="`outcome_intensity`"
                        min="1"
                        max="10"
                        class="w-full px-2 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-white text-center"
                        placeholder="1-10"
                      >
                    </div>
                    <button 
                      type="button" 
                      @click="outcomeEmotions.splice(index, 1); outcomeIntensities.splice(index, 1)"
                      class="px-2 py-2 bg-red-500/50 text-white rounded-lg hover:bg-red-500/70"
                      x-show="outcomeEmotions.length > 1"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                      </svg>
                    </button>
                  </div>
                </template>

                <button 
                  type="button" 
                  @click="outcomeEmotions.push(''); outcomeIntensities.push(3)"
                  class="px-3 py-1 bg-gray-600 text-white rounded-lg hover:bg-gray-500 text-sm"
                >
                  + Add Another Emotion
                </button>
              </div>
            </div>

            <!-- Belief after rational response -->
            <div class="space-y-1" x-data="{ beliefAfter: 40 }">
              <div class="flex justify-between items-center">
                <label for="belief_after" class="block text-sm font-medium text-gray-300">
                  Belief in Original Thought After Reframing (%)
                </label>
                <span class="text-purple-400 text-lg font-semibold" x-text="beliefAfter + '%'"></span>
              </div>
              <input
                type="range"
                class="w-full h-2 bg-gray-700 rounded-lg cursor-pointer accent-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500"
                min="0"
                max="100"
                step="5"
                x-model="beliefAfter"
              >
            </div>

            <div class="flex space-x-3">
              <button
                type="submit"
                class="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition flex-1"
              >
                Save Thought Record
              </button>
              <button
                type="button"
                @click="closeNewThoughtForm"
                class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-500 transition"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>

        <!-- List of Thought Records for Selected Date -->
        <div id="thought-records-list">
          {% if thoughtRecords.size > 0 %}
            <div class="space-y-4">
              {% for record in thoughtRecords %}
                <div class="bg-gray-700 p-4 rounded-lg shadow hover:bg-gray-600 transition">
                  <div class="flex justify-between items-start">
                    <h3 class="font-semibold text-purple-300">{{ record.created_at | date: '%Y-%m-%d' }}</h3>
                    <div class="flex space-x-2">
                      <a href="/thought-record/view/{{ record.record_id }}" class="text-blue-400 hover:underline text-sm">View</a>
                      <button 
                        type="button"
                        class="text-red-400 hover:underline text-sm"
                        @click="deleteThoughtRecord('{{ record.record_id }}')"
                      >Delete</button>
                    </div>
                  </div>
                  
                  <div class="mt-2 text-sm">
                    <p class="text-gray-300"><span class="text-gray-400">Situation:</span> {{ record.situation | truncate: 100 }}</p>
                    
                    <p class="mt-1 text-gray-300">
                      <span class="text-gray-400">Emotions:</span> 
                      {% for emotion in record.emotions %}
                        {{ emotion }}{% if record.emotion_intensity[forloop.index0] %}({{ record.emotion_intensity[forloop.index0] }}){% endif %}{% if forloop.last == false %}, {% endif %}
                      {% endfor %}
                    </p>
                    
                    <p class="mt-1 text-gray-300"><span class="text-gray-400">Thoughts:</span> {{ record.automatic_thoughts | truncate: 100 }}</p>
                    
                    {% if record.cognitive_distortions.size > 0 %}
                      <p class="mt-1 text-gray-300">
                        <span class="text-gray-400">Distortions:</span> 
                        {{ record.cognitive_distortions | join: ", " | truncate: 80 }}
                      </p>
                    {% endif %}
                    
                    {% if record.rational_response %}
                      <p class="mt-1 text-gray-300"><span class="text-gray-400">Response:</span> {{ record.rational_response | truncate: 80 }}</p>
                    {% endif %}
                  </div>
                </div>
              {% endfor %}
            </div>
          {% else %}
            <div class="text-center py-10 text-gray-400">
              <p>No thought records for this date.</p>
              <p class="mt-2 text-sm">Click "New Record" to add one.</p>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
  <!-- Delete confirmation modal -->
<div class="fixed inset-0 bg-black/50 items-center justify-center hidden" id="delete-modal" x-ref="deleteModal" x-show="showDeleteModal" x-cloak>
  <div class="bg-gray-800 p-6 rounded-lg max-w-md mx-auto mt-32">
    <h3 class="text-lg font-semibold text-white mb-4">Confirm Delete</h3>
    <p class="text-gray-300 mb-6">Are you sure you want to delete this thought record? This action cannot be undone.</p>
    <div class="flex space-x-3">
      <button 
        id="confirm-delete"
        @click="confirmDelete"
        class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition flex-1"
      >Delete</button>
      <button 
        @click="cancelDelete"
        class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-500 transition flex-1"
      >Cancel</button>
    </div>
  </div>
</div>
</main>


{% endblock %}

{% block scripts %}
<script nonce="{{ nonce }}">
  document.addEventListener('alpine:init', () => {
    // Initialize calendar data
    Alpine.data('calendarData', () => ({
      currentYear: {{ currentYear | raw }},
      currentMonth: {{ currentMonth | raw }},
      selectedDay: {{ selectedDate | raw | date: "%-d" | default: "new Date().getDate()" }},
      datesWithData: {{ datesWithThoughtData | raw }},
      weekdays: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      
      get currentMonthName() {
        return new Date(this.currentYear, this.currentMonth, 1)
          .toLocaleString('default', { month: 'long' });
      },
      
      get daysInMonth() {
        return new Date(this.currentYear, this.currentMonth + 1, 0).getDate();
      },
      
      get firstDayOfMonth() {
        return new Date(this.currentYear, this.currentMonth, 1).getDay();
      },
      
      isToday(day) {
        const today = new Date();
        return day === today.getDate() && 
               this.currentMonth === today.getMonth() && 
               this.currentYear === today.getFullYear();
      },
      
      isSelectedDate(day) {
        return day === this.selectedDay &&
               this.currentMonth === {{ currentMonth }} &&
               this.currentYear === {{ currentYear }};
      },
      
      hasThoughtData(day) {
        return this.datesWithData[day] && this.datesWithData[day].has_data;
      },
      
      getRecordCount(day) {
        return this.datesWithData[day] ? this.datesWithData[day].count || 1 : 0;
      },
      
      getDayClasses(day) {
        if (this.isSelectedDate(day)) {
          return 'bg-purple-600 hover:bg-purple-700 text-white';
        } else if (this.hasThoughtData(day)) {
          return 'bg-gray-700 hover:bg-gray-600 text-white';
        } else if (this.isToday(day)) {
          return 'bg-gray-700/50 hover:bg-gray-600 text-white border border-purple-500/50';
        } else {
          return 'bg-gray-700/50 hover:bg-gray-600 text-gray-300';
        }
      },
      
      selectDate(day) {
        const date = new Date(this.currentYear, this.currentMonth, day+1);
        const formattedDate = date.toISOString().split('T')[0];
        window.location.href = `/thought-record/${formattedDate}`;
      },
      
      async prevMonth() {
        this.currentMonth--;
        if (this.currentMonth < 0) {
          this.currentMonth = 11;
          this.currentYear--;
        }
        await this.fetchMonthData();
      },
      
      async nextMonth() {
        this.currentMonth++;
        if (this.currentMonth > 11) {
          this.currentMonth = 0;
          this.currentYear++;
        }
        await this.fetchMonthData();
      },
      
      async fetchMonthData() {
        try {
          // Show loading indicator
          document.getElementById('calendar-loader').classList.add('htmx-request');
          
          // Convert month to 1-indexed for the API
          const month = this.currentMonth + 1;
          const response = await fetch(`/api/thought-record/calendar/${this.currentYear}/${month}`);
          const data = await response.json();
          
          this.datesWithData = data.dates;
        } catch (error) {
          console.error('Failed to fetch calendar data:', error);
        } finally {
          // Hide loading indicator
          document.getElementById('calendar-loader').classList.remove('htmx-request');
        }
      }
    }));
    
    // Main thought record application
    Alpine.data('thoughtRecordApp', () => ({
      showDeleteModal: false,
      recordToDelete: null,
      
      toggleNewThoughtForm() {
        this.$refs.newThoughtForm.classList.toggle('hidden');
      },
      
      closeNewThoughtForm() {
        this.$refs.newThoughtForm.classList.add('hidden');
      },
      
      deleteThoughtRecord(recordId) {
        this.recordToDelete = recordId;
        this.$refs.deleteModal.classList.remove('hidden');
        this.showDeleteModal = true;
      },
      
      cancelDelete() {
        this.showDeleteModal = false;
        this.recordToDelete = null;
      },
      
      async confirmDelete() {
        try {
          const response = await fetch(`/thought-record/${this.recordToDelete}`, {
            method: 'DELETE',
          });
          
          const result = await response.json();
          
          if (result.redirect) {
            window.location.href = result.redirect;
          } else {
            console.error('No redirect URL provided');
            window.location.reload();
          }
        } catch (error) {
          console.error('Error deleting record:', error);
          alert('Failed to delete the thought record');
          this.showDeleteModal = false;
        }
      }
    }));
  });
</script>
{% endblock %}
