{% layout "layout.liquid" %}

{% block title %}BDI Test | CBT Workbook{% endblock %}

{% block main %}
<main>
<div class="min-h-screen text-white" x-data="bdiQuiz()">
  <div class="bg-gray-900 p-6 rounded-lg shadow-lg md:mx-8 mt-8">
    <nav class="bg-gray-900 p-4 flex flex-col sm:flex-row justify-between items-center rounded-lg mx-4 mt-4 gap-4 sm:gap-0">
      <h1 class="text-xl sm:text-3xl font-bold text-purple-400 text-center sm:text-left">Beck's Depression Inventory</h1>
      <a href="/dashboard" class="bg-red-500 px-4 py-2 rounded-lg hover:bg-red-600 transition w-full sm:w-auto text-center">
        Skip the Test
      </a>
    </nav>
    <div class="text-gray-300 mt-4 px-4 sm:px-6 text-sm sm:text-base">
      <p x-text="quizData.instructions"></p>
    </div>
    <div class="flex flex-col items-center p-4 sm:p-6">
      <div class="w-full flex space-x-2 mb-6 overflow-x-auto pb-2">
        <ul class="flex space-x-2">
          <template x-for="(question, index) in questions" :key="index">
            <button 
              @click="jumpToQuestion(index)"
              :class="{
                'px-3 py-1 rounded-lg transition min-w-[2rem] text-sm hover:bg-slate-400': true,
                'bg-purple-500': question.selectedValue !== undefined,
                'bg-gray-600': question.selectedValue === undefined && currentQuestionIndex === index,
                'bg-gray-700': question.selectedValue === undefined && currentQuestionIndex !== index
              }"
              :title="`Question ${index + 1}`"
              x-text="index + 1"
            ></button>
          </template>
        </ul>
      </div>
      
      <form @submit.prevent="submitForm" method="POST" class="w-full">
        <input type="hidden" name="sessionId" x-model="sessionId">
        
        <main class="w-full bg-gray-800 p-4 sm:p-6 rounded-lg" x-show="!showResults">
          <div class="w-full bg-gray-700 rounded-full h-2 mb-4">
            <div
              class="bg-purple-500 h-2 rounded-full transition-all duration-300 ease-in-out"
              :style="`width: ${((currentQuestionIndex + 1) / questions.length) * 100}%`"
            ></div>
          </div>
          
          <div id="question-container">
            <h2 class="text-lg sm:text-xl font-semibold" x-text="currentQuestion.text"></h2>
            <div class="mt-4 space-y-3">
              <template x-for="(option, idx) in currentQuestion.options" :key="idx">
                <label class="flex items-start p-3 bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-600 transition">
                  <input 
                    type="radio" 
                    :name="`question_${currentQuestionIndex}`" 
                    :value="option.value" 
                    x-model="questions[currentQuestionIndex].selectedValue"
                    class="mt-1 mr-3"
                    @change="updateNavButtons()"
                  >
                  <span x-text="option.text"></span>
                </label>
              </template>
            </div>
          </div>
          
          <div class="flex justify-between mt-6 gap-2">
            <button
              type="button"
              @click="prevQuestion"
              :disabled="currentQuestionIndex === 0"
              class="px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition flex-1 sm:flex-none disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Previous
            </button>
            <button
              type="button"
              @click="nextQuestion"
              :disabled="!questions[currentQuestionIndex].selectedValue"
              class="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition flex-1 sm:flex-none disabled:opacity-50 disabled:cursor-not-allowed"
              x-text="currentQuestionIndex === questions.length - 1 ? 'Submit' : 'Next'"
            ></button>
          </div>
        </main>
        
        <!-- Hidden inputs to store all answers for form submission -->
        <template x-for="(question, index) in questions" :key="index">
          <input type="hidden" :name="`selectedOptions[${index}]`" :value="question.selectedValue">
        </template>
        
        <button type="submit" id="submit-btn" class="hidden"></button>
      </form>
      
      <div x-show="showResults" class="w-full mt-6 bg-gray-800 p-4 sm:p-6 rounded-lg">
        <h2 class="text-2xl font-bold text-purple-400 mb-4">Your Results</h2>
        <p class="text-lg mb-2" x-text="`Your BDI Score: ${totalScore}`"></p>
        <p class="text-gray-300" x-text="interpretation"></p>
        <div class="mt-6 flex gap-4">
          <a href="/dashboard" class="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition text-center">
            Return to Dashboard
          </a>
          <button
            @click="showResults = false; currentQuestionIndex = 0; questions.forEach(q => q.selectedValue = undefined);"
            class="px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition text-center"
          > Retake Test
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
</main>
{% endblock %}

{% block scripts %}
<script nonce="{{ nonce }}">
  // Define the quiz data as a JavaScript variable first
  const bdiData = {{ bdiData | raw }};
  
  function bdiQuiz() {
    return {
      quizData: bdiData,
      questions: bdiData.questions.map(q => ({ ...q, selectedValue: undefined })),
      currentQuestionIndex: 0,
      sessionId: crypto.randomUUID(),
      showResults: bdiData.showResults || false,
      totalScore: bdiData.totalScore || 0,
      interpretation: bdiData.interpretation || '',
      
      get currentQuestion() {
        return this.questions[this.currentQuestionIndex];
      },
      
      nextQuestion() {
        if (this.currentQuestionIndex < this.questions.length - 1) {
          this.currentQuestionIndex++;
        } else {
          document.getElementById('submit-btn').click();
        }
      },
      
      prevQuestion() {
        if (this.currentQuestionIndex > 0) {
          this.currentQuestionIndex--;
        }
      },
      
      jumpToQuestion(index) {
        this.currentQuestionIndex = index;
      },
      
      updateNavButtons() {
        // This is handled automatically by Alpine.js bindings
      },
      
      submitForm() {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/bdi';
        
        // Add session ID
        const sessionInput = document.createElement('input');
        sessionInput.type = 'hidden';
        sessionInput.name = 'sessionId';
        sessionInput.value = this.sessionId;
        form.appendChild(sessionInput);
        
        // Add all selected options
        this.questions.forEach((question, index) => {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = `selectedOptions[${index}]`;
          input.value = question.selectedValue;
          form.appendChild(input);
        });
        
        document.body.appendChild(form);
        form.submit();
      }
    };
  }
</script>
{% endblock %}
